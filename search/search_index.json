{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#hhaven","title":"HHaven","text":"<p>A well-documented and typed API wrapper for Hentai Haven, providing efficient asynchronous requests, built-in cache support, and Pydantic Models for seamless autocompletion and linter support.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Efficient Asynchronous Structure: Utilize a fully asynchronous structure that enhances request speed without affecting other processes in your code.</li> <li>Built-in Cache Support: Benefit from built-in cache support using the aiocache library, reducing unnecessary API requests and improving overall performance.</li> <li>Pydantic Model Output: Receive all data in the form of Pydantic Models, enabling comprehensive autocompletion and linter support.</li> <li>Comprehensive Documentation: Explore extensive and user-friendly documentation, covering all aspects of this library.</li> </ul>"},{"location":"#links","title":"Links","text":"<p>Repository - https://github.com/JokelBaf/hhaven</p> <p>API Reference - https://jokelbaf.github.io/hhaven-api-reference</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+</li> <li>pydantic</li> <li>aiohttp</li> <li>aiocache</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>From PyPi: <pre><code>pip install hhaven\n</code></pre> From GitHub: <pre><code>pip install git+https://github.com/JokelBaf/hhaven.git\n</code></pre></p>"},{"location":"#examples","title":"Examples","text":"<p>Search for hentai by it's name: <pre><code>from hhaven import Client\nimport asyncio\n\nasync def main():\n    client = await Client().build()\n\n    results = await client.search(\"Maid Kyouiku\")\n    hentai = await results[0].full()\n\n    print(hentai)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Get all episodes of the latest hentai: <pre><code>from hhaven import Client\nimport asyncio\n\nasync def main():\n    client = await Client().build()\n\n    home = await client.home()\n    hentai = await home.last[0].full()\n\n    for episode in hentai.episodes:\n        print(episode.name)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p>"},{"location":"usage/","title":"Usage","text":"<p>All requests to the API must be made through the Client class. Every request requires special Cloudflare token which can be obtained using <code>get_new_token()</code> function. You only need to set the token once during client initialization.</p>"},{"location":"usage/#initializing-client","title":"Initializing Client","text":"<p>In order to properly initialize client, <code>build()</code> function must be called:</p> <p><pre><code>token = \"...\"\n\n# You can pass token to Client class:\nclient = await Client(token).build()\n\n# Or to build function:\nclient = await Client().build(token)\n</code></pre> If no token was provided during initialization, new token will be automatically obtained via API:</p> <pre><code>client = await Client().build()\n\n# Will print obtained token\nprint(client.token)\n</code></pre>"},{"location":"usage/#debugging","title":"Debugging","text":"<p>You may want to see all incoming and outgoing traffic the library send and receive. In order to enable debugging, use <code>debug</code> argument of the Client class:</p> <pre><code>client = await Client(debug=True).build()\n</code></pre> <p>After this you will see logs on every request on console: <pre><code>DEBUG:hhaven.client:GET https://api.hentaihaven.app/v1/search?q=Maid+Kyouiku # Request info\n{} # Request body\n{'success': True, 'data': [{'post_ID': 87109, 'post_title': 'Maid Kyouiku. Botsuraku Kizoku Rurikawa Tsubaki The Animation', 'post_name': 'maid-kyouiku-botsuraku-kizoku-rurikawa-tsubaki-the-animation', 'post_thumbnail': 'https://hh-imgs.cyou/images/hh/w/f/s_Maid-Kyouiku.-Botsuraku-Kizoku-Rurikawa-Tsubaki-The-Animation-Episode-1.jpg'}]} # Response\n</code></pre></p>"},{"location":"usage/#caching","title":"Caching","text":"<p>HHaven has built-in caching functionality which uses aiocache library. This means you have two ways to set up caching:</p>"},{"location":"usage/#using-memory-cache","title":"Using memory cache","text":"<p>Installation: <pre><code>pip install aiocache[memcached]\n</code></pre></p> <p>Usage: <pre><code>from aiocache import Cache\nfrom hhaven import Client\nimport asyncio, time\n\nasync def main():\n    cache = Cache(Cache.MEMORY)\n    client = await Client(cache=cache).build()\n\n    for i in [\"First\", \"Second\", \"Third\"]:\n        start = time.time()\n        await client.search(\"Maid Kyouiku\")\n\n        print(f\"{i} call took {time.time() - start} seconds.\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p> <p>Result: <pre><code>First call took 0.2489948272705078 seconds.\nSecond call took 0.0 seconds.\nThird call took 0.0 seconds.\n</code></pre></p>"},{"location":"usage/#using-redis","title":"Using redis","text":"<p>Installation: <pre><code>pip install aiocache[redis]\n</code></pre></p> <p>Usage: <pre><code>from aiocache import Cache\nfrom hhaven import Client\nimport asyncio, time\n\nasync def main():\n    cache = Cache(Cache.REDIS, endpoint=\"127.0.0.1\", port=6379, namespace=\"main\")\n    client = await Client(cache=cache).build()\n\n    for i in [\"First\", \"Second\", \"Third\"]:\n        start = time.time()\n        await client.search(\"Maid Kyouiku\")\n\n        print(f\"{i} call took {time.time() - start} seconds.\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p> <p>Result: <pre><code>First call took 0.2899123413241 seconds.\nSecond call took 0.0 seconds.\nThird call took 0.0 seconds.\n</code></pre></p>"},{"location":"usage/#token-validation","title":"Token validation","text":"<p>Every time you initialize client with your own token, it is validated by requesting home page: hhaven/client.py<pre><code>...\nif validate_token:\n    # Validate token\n    await self._request(\"GET\", \"hentai/home\", disable_logging=True)\n</code></pre></p> <p>You can disable this behavior by setting <code>validate_token</code> to <code>False</code> during client initialization: <pre><code>await Client().build(validate_token=False)\n</code></pre></p>"},{"location":"usage/#exceptions-handling","title":"Exceptions handling","text":"<p>Some methods can raise custom exceptions. All library exceptions can be imported from <code>hhaven.exceptions</code> and used in try/except block: <pre><code>from hhaven.exceptions import HentaiNotFound\n\n...\n\ntry:\n    hentai = await client.get_hentai(123)\nexcept HentaiNotFound:\n    print(\"Can not find hentai with this ID.\")\n</code></pre></p> <p>There are some exceptions that can be applied to multiple methods. For example, <code>HHavenNotFound</code> is a parent exception for both <code>HentaiEpisodeNotFound</code> and <code>HentaiNotFound</code>: <pre><code>from hhaven.exceptions import HHavenNotFound\n\ntry:\n    hentai = await client.get_hentai(123)\n    episode = await client.get_episode(123, 123)\nexcept HHavenNotFound:\n    print(\"Either hentai or episode was not found.\")\n</code></pre></p>"}]}